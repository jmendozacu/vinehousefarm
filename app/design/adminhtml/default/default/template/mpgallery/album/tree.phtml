<?php
/**
 * MagePlace Gallery Extension
 *
 * @category    Mageplace_Gallery
 * @package     Mageplace_Gallery
 * @copyright   Copyright (c) 2014 Mageplace. (http://www.mageplace.com)
 * @license     http://www.mageplace.com/disclaimer.html
 */

/**
 * @var Mageplace_Gallery_Block_Adminhtml_Album_Tree $this
 */
?>
<div class="albums-side-col">
    <div class="content-header">
        <h3 class="icon-head head-categories">
            <?php echo $this->__('Albums'); ?>
        </h3>
        <?php if ($this->getRoot()): ?>
            <?php echo $this->getAddRootAlbumButtonHtml(); ?><br/>
            <?php echo $this->getAddChildAlbumButtonHtml(); ?>
        <?php endif; ?>
    </div>

    <div class="tree-actions">
        <?php if ($this->getRoot()): ?>
            <a href="#" onclick="tree.collapseTree(); return false;"><?php echo $this->__('Collapse All'); ?></a>
            <span class="separator">|</span>
            <a href="#" onclick="tree.expandTree(); return false;"><?php echo $this->__('Expand All'); ?></a>
        <?php endif; ?>
    </div>
    <?php if ($this->getRoot()): ?>
        <div class="tree-holder">
            <div id="tree-div" style="width:100%; overflow:auto;"></div>
        </div>
    <?php endif; ?>
</div>
<?php if ($this->getRoot()): ?>
    <script type="text/javascript">
    //<![CDATA[
    var tree;

    Ext.lib.Event.getTarget = function (e) {
        var ee = e.browserEvent || e;
        return ee.target ? Event.element(ee) : null;
    };

    Ext.tree.TreePanel.Enhanced = function (el, config) {
        Ext.tree.TreePanel.Enhanced.superclass.constructor.call(this, el, config);
    };

    Ext.extend(Ext.tree.TreePanel.Enhanced, Ext.tree.TreePanel, {
        loadTree: function (config, firstLoad) {
            var parameters = config['parameters'];
            var data = config['data'];

            if ((typeof parameters['root_visible']) != 'undefined') {
                this.rootVisible = parameters['root_visible'] * 1;
            }

            var root = new Ext.tree.TreeNode(parameters);

            this.nodeHash = {};
            this.setRootNode(root);

            if (firstLoad) {
                this.addListener('click', this.albumClick);
                this.addListener('beforenodedrop', albumMove.createDelegate(this));
            }

            this.loader.buildAlbumTree(root, data);
            this.el.dom.innerHTML = '';

            this.render();

            if (parameters['expanded']) {
                this.expandAll();
            } else {
                root.expand();
            }

            var selectedNode = this.getNodeById(parameters['album_id']);
            if (selectedNode) {
                this.currentNodeId = parameters['album_id'];
            }

            this.selectCurrentNode();
        },

        request: function (url, params) {
            if (!params) {
                if (albumTabsJsTabs.activeTab) {
                    var params = {
                        active_tab_id: albumTabsJsTabs.activeTab.id
                    };
                } else {
                    var params = {};
                }
            }

            if (!params.form_key) {
                params.form_key = FORM_KEY;
            }

            var result = new Ajax.Request(url + (url.match(new RegExp('\\?')) ? '&' : '?') + 'isAjax=true', {
                parameters: params,
                method: 'post'
            });

            return result;
        },

        selectCurrentNode: function () {
            if (this.currentNodeId) {
                var selectedNode = this.getNodeById(this.currentNodeId);
                if ((typeof selectedNode.attributes.path) != 'undefined') {
                    var path = selectedNode.attributes.path;
                    path = '0/' + path;
                    this.selectPath(path);
                } else {
                    this.getSelectionModel().select(selectedNode);
                }
            }
        },

        collapseTree: function () {
            this.collapseAll();

            this.selectCurrentNode();

            if (!this.collapsed) {
                this.collapsed = true;
                this.loader.dataUrl = '<?php echo $this->getLoadTreeUrl(false); ?>';
                this.request(this.loader.dataUrl, false);
            }
        },

        expandTree: function () {
            this.expandAll();
            if (this.collapsed) {
                this.collapsed = false;
                this.loader.dataUrl = '<?php echo $this->getLoadTreeUrl(true); ?>';
                this.request(this.loader.dataUrl, false);
            }
        },

        albumClick: function (node, e) {
            var baseUrl = '<?php echo $this->getEditUrl(); ?>';
            var extUrl = 'id/' + node.id + '/';
            var url = parseSidUrl(baseUrl, extUrl);

            this.currentNodeId = node.id;

            if (!this.useAjax) {
                setLocation(url);
                return;
            }

            if (albumTabsJsTabs.activeTab) {
                var params = {
                    active_tab_id: albumTabsJsTabs.activeTab.id
                };
            }

            updateContent(url, params);
        }
    });

    function renderTree(event) {
        if (tree && event) {
            new Ajax.Request(tree.switchTreeUrl + (tree.switchTreeUrl.match(new RegExp('\\?')) ? '&' : '?') + 'isAjax=true', {
                parameters: {form_key: FORM_KEY},
                method: 'post',

                onComplete: function (transport) {
                    var response = eval('(' + transport.responseText + ')');
                    if (!response['parameters']) {
                        return false;
                    }

                    renderNewTree(response);
                }
            });
        } else {
            renderNewTree();
        }
    }

    function renderNewTree(config) {
        if (!config) {
            var config = defaultLoadTreeParams;
        }

        if (tree) {
            tree.purgeListeners();
            tree.el.dom.innerHTML = '';
        }

        tree = new Ext.tree.TreePanel.Enhanced('tree-div', newTreeParams);
        tree.loadTree(config, true);

        var selectedNode = tree.getNodeById(config.parameters.album_id);
        if (selectedNode) {
            tree.currentNodeId = config.parameters.album_id;
        }

        tree.selectCurrentNode();

        var url = tree.editUrl;

        if (selectedNode) {
            url = url + 'id/' + config.parameters.album_id;
        }

        updateContent(url);
    }

    Ext.onReady(function () {
        var albumLoader = new Ext.tree.TreeLoader({
            dataUrl: '<?php echo $this->getLoadTreeUrl(); ?>'
        });

        albumLoader.createNode = function (config) {
            var node;
            var _node = Object.clone(config);
            if (config.children && !config.children.length) {
                delete(config.children);
                node = new Ext.tree.AsyncTreeNode(config);
            } else {
                node = new Ext.tree.TreeNode(config);
            }

            return node;
        };

        albumLoader.buildAlbumTree = function (parent, config) {
            if (!config) return null;

            if (parent && config && config.length) {
                for (var i = 0; i < config.length; i++) {
                    var node;
                    var _node = Object.clone(config[i]);

                    if (_node.children && !_node.children.length) {
                        delete(_node.children);
                        node = new Ext.tree.AsyncTreeNode(_node);
                    } else {
                        node = new Ext.tree.TreeNode(config[i]);
                    }

                    parent.appendChild(node);
                    node.loader = node.getOwnerTree().loader;

                    if (_node.children) {
                        this.buildAlbumTree(node, _node.children);
                    }
                }
            }
        };

        albumLoader.buildHash = function (node) {
            var hash = {};

            hash = this.toArray(node.attributes);

            if (node.childNodes.length > 0 || (node.loaded == false && node.loading == false)) {
                hash['children'] = new Array;

                for (var i = 0, len = node.childNodes.length; i < len; i++) {
                    if (!hash['children']) {
                        hash['children'] = new Array;
                    }

                    hash['children'].push(this.buildHash(node.childNodes[i]));
                }
            }

            return hash;
        };

        albumLoader.toArray = function (attributes) {
            var data = {form_key: FORM_KEY};
            for (var key in attributes) {
                var value = attributes[key];
                data[key] = value;
            }

            return data;
        };

        albumLoader.on("beforeload", function (treeLoader, node) {
            treeLoader.baseParams.id = node.attributes.id;
            treeLoader.baseParams.form_key = FORM_KEY;
        });

        albumLoader.on("load", function (treeLoader, node, config) {
            varienWindowOnload();
        });

        newTreeParams = {
            animate: 0,
            loader: albumLoader,
            enableDD: 1,
            containerScroll: 1,
            selModel: new Ext.tree.CheckNodeMultiSelectionModel(),
            rootVisible: <?php echo (int)$this->getRoot()->getIsVisible(); ?>,
            useAjax: <?php echo (int)$this->getUseAjax(); ?>,
            switchTreeUrl: '<?php echo $this->getSwitchTreeUrl(); ?>',
            editUrl: '<?php echo $this->getEditUrl(); ?>',
            currentNodeId: <?php echo (int)$this->getAlbumId(); ?>
        };

        defaultLoadTreeParams = {
            parameters: {
                text: '<?php echo htmlentities($this->getRoot()->getName()); ?>',
                draggable: 0,
                allowDrop: <?php echo (int)$this->getRoot()->getIsVisible(); ?>,
                id: <?php echo (int)$this->getRoot()->getId(); ?>,
                expanded: <?php echo (int)$this->getIsWasExpanded(); ?>,
                album_id: <?php echo (int)$this->getAlbumId(); ?>,
                root_visible: <?php echo (int)$this->getRoot()->getIsVisible(); ?>
            },
            data: <?php echo $this->getTreeJson(); ?>
        };

        renderTree();
    });

    function addNewAlbum(url, isRoot) {
        if (isRoot) {
            tree.currentNodeId = tree.root.id;
        }

        url += 'parent/' + tree.currentNodeId;

        updateContent(url);
    }

    function albumMove(obj) {
        var data = {id: obj.dropNode.id, form_key: FORM_KEY};

        data.point = obj.point;
        switch (obj.point) {
            case 'above' :
                data.pid = obj.target.parentNode.id;
                data.paid = obj.dropNode.parentNode.id;
                if (obj.target.previousSibling) {
                    data.aid = obj.target.previousSibling.id;
                } else {
                    data.aid = 0;
                }
                break;

            case 'below' :
                data.pid = obj.target.parentNode.id;
                data.aid = obj.target.id;
                break;

            case 'append' :
                data.pid = obj.target.id;
                data.paid = obj.dropNode.parentNode.id;
                if (obj.target.lastChild) {
                    data.aid = obj.target.lastChild.id;
                } else {
                    data.aid = 0;
                }
                break;

            default :
                obj.cancel = true;
                return obj;
        }

        var pd = [];
        for (var key in data) {
            pd.push(encodeURIComponent(key), "=", encodeURIComponent(data[key]), "&");
        }

        pd.splice(pd.length - 1, 1);

        new Ajax.Request('<?php echo $this->getMoveUrl(); ?>', {
            method: 'POST',
            parameters: pd.join(""),

            onSuccess: function (transport) {
                try {
                    if (transport.responseText) {
                        if (transport.responseText === 'SUCCESS') {
                            albumForm.refreshPath();
                        } else {
                            alert(transport.responseText);
                            location.reload();
                        }
                    }
                } catch (e) {
                    console.log(e);
                }
            },

            onFailure: function (transport) {
                try {
                    console.log(transport.statusText);
                } catch (e) {
                    console.log(e);
                }

                location.reload();
            }
        });
    }
    //]]>
    </script>
<?php endif; ?>
